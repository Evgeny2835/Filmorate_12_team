package ru.yandex.practicum.filmorate.service;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Lazy;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.exceptions.IncorrectIdException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Mpa;
import ru.yandex.practicum.filmorate.model.User;

import java.time.LocalDate;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
class UserServiceTest {

    private final UserService userService;

    @Lazy private final FilmService filmService;

    private final JdbcTemplate jdbcTemplate;

    User user1;
    User user2;
    User user3;
    User user4;
    User user5;

    @BeforeEach
    void beforeEach() {

        String createSql = "CREATE TABLE IF NOT EXISTS users (\n" +
                "    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    email VARCHAR(50) NOT NULL ,\n" +
                "    login VARCHAR(50) NOT NULL ,\n" +
                "    name VARCHAR(50) NOT NULL ,\n" +
                "    birthday DATE,\n" +
                "    UNIQUE (email)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS mpa (\n" +
                "    rating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    name VARCHAR(10) NOT NULL\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS films (\n" +
                "    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    name VARCHAR(50) NOT NULL,\n" +
                "    description VARCHAR(200) NOT NULL,\n" +
                "    releaseDate DATE,\n" +
                "    duration INT CHECK (duration > 0),\n" +
                "    rating_id INT REFERENCES mpa (rating_id)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS friendList (\n" +
                "    user_id INTEGER REFERENCES users (user_id),\n" +
                "    friend_id INTEGER REFERENCES users (user_id)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS likesList (\n" +
                "    film_id INTEGER REFERENCES films (film_id),\n" +
                "    user_id INTEGER REFERENCES users (user_id)\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS genres (\n" +
                "    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    name VARCHAR(50) NOT NULL\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS genresList (\n" +
                "    film_id INTEGER REFERENCES films (film_id),\n" +
                "    genre_id INTEGER REFERENCES genres (genre_id)\n" +
                ");\nCREATE TABLE IF NOT EXISTS REVIEW\n" +
                "(\n" +
                "    REVIEW_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    CONTENT     VARCHAR(200),\n" +
                "    IS_POSITIVE BOOLEAN,\n" +
                "    USER_ID     INTEGER REFERENCES USERS (USER_ID),\n" +
                "    FILM_ID     INTEGER REFERENCES FILMS (FILM_ID),\n" +
                "    IS_DELETE   BOOLEAN DEFAULT FALSE\n" +
                ");\n" +
                "\n" +
                "CREATE TABLE IF NOT EXISTS REVIEW_USEFUL\n" +
                "(\n" +
                "    REVIEW_USEFUL_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    REVIEW_ID        INTEGER REFERENCES REVIEW (REVIEW_ID),\n" +
                "    USER_ID          INTEGER REFERENCES USERS (USER_ID),\n" +
                "    IS_LIKE          BOOLEAN,\n" +
                "    IS_DELETE        BOOLEAN DEFAULT FALSE\n" +
                ");" +
                "CREATE TABLE IF NOT EXISTS directors (\n" +
                "    director_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n" +
                "    name varchar(100) NOT NULL\n" +
                ");\n" +
                "CREATE TABLE IF NOT EXISTS directors_list (\n" +
                "    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,\n" +
                "    director_id INTEGER REFERENCES directors (director_id) ON DELETE CASCADE\n" +
                ");" +
                "\n" +
                "INSERT INTO genres (name)\n" +
                "VALUES ('Комедия' );\n" +
                "INSERT INTO genres (name)\n" +
                "VALUES ('Драма' );\n" +
                "INSERT INTO genres (name)\n" +
                "VALUES ('Мультфильм' );\n" +
                "INSERT INTO genres (name)\n" +
                "VALUES ('Триллер' );\n" +
                "INSERT INTO genres (name)\n" +
                "VALUES ('Документальный' );\n" +
                "INSERT INTO genres (name)\n" +
                "VALUES ('Боевик' );\n" +
                "\n" +
                "INSERT INTO mpa (name)\n" +
                "VALUES ('G');\n" +
                "INSERT INTO mpa (name)\n" +
                "VALUES ('PG');\n" +
                "INSERT INTO mpa (name)\n" +
                "VALUES ('PG-13');\n" +
                "INSERT INTO mpa (name)\n" +
                "VALUES ('R');\n" +
                "INSERT INTO mpa (name)\n" +
                "VALUES ('NC-17');";

        jdbcTemplate.update("DROP TABLE FILMS, FRIENDLIST, GENRES, GENRESLIST, LIKESLIST, MPA, USERS, DIRECTORS, DIRECTORS_LIST, REVIEW, REVIEW_USEFUL");
        jdbcTemplate.update(createSql);

        user1 = new User("user1@ya.ru", "user1", LocalDate.of(1989, 7, 29));
        user1.setName("Пользователь 1");

        user2 = new User("user2@ya.ru", "user2", LocalDate.of(1989, 7, 29));
        user2.setName("Пользователь 2");

        user3 = new User("user3@ya.ru", "user3", LocalDate.of(1989, 7, 29));
        user3.setId(3);
        user3.setName("Пользователь 3");

        user4 = new User("user4@ya.ru", "user4", LocalDate.of(1989, 7, 29));
        user4.setName("Пользователь 4");

        user5 = new User("user5@ya.ru", "user5", LocalDate.of(1989, 7, 29));
        user5.setName("Пользователь 5");

    }


    @Test
    void shouldBeAddUserToRep() {

        userService.createUser(user1);
        userService.createUser(user2);

        assertEquals(2, userService.findAll().size());

    }

    @Test
    void shouldBeAddUserWhenUpdate() {

        userService.createUser(user1);
        userService.createUser(user2);

        userService.updateUser(user3);

        User testUser = userService.getUserById(3);

        assertEquals(user3.getLogin(), testUser.getLogin());

    }

    @Test
    void shouldBeUpdateUser() {

        userService.createUser(user1);
        userService.createUser(user2);

        User updateUser2 = new User("updateUser2@ya.ru", "UpdateUser2", LocalDate.of(1989, 7, 29));
        updateUser2.setName("Пользователь обновленный 2");
        updateUser2.setId(2);

        userService.updateUser(updateUser2);

        assertEquals(updateUser2.getLogin(), userService.getUserById(2).getLogin());

    }

    @Test
    void shouldBeGetUserById() {

        userService.createUser(user1);

        User testUser = userService.getUserById(1);

        assertEquals(user1.getLogin(), testUser.getLogin());

    }

    @Test
    void shouldBeThrowExceptionIfUserIdIsNotExistByGetUser() {

        userService.createUser(user1);

        final IncorrectIdException exception =  assertThrows(
                    IncorrectIdException.class,
                    () -> userService.getUserById(3)
        );

    }

    @Test
    void shouldBeAddUserToFriend() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);

        userService.addFriend(1, 3);

        assertTrue(userService.getUserById(1).getFriends().contains(3));

    }

    @Test
    void shouldBeThrowExceptionIfUserIsAlreadyFriendly() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);

        userService.addFriend(1, 3);
        userService.addFriend(3, 1);

        final IncorrectIdException exception = assertThrows(
                IncorrectIdException.class,
                () -> userService.addFriend(3, 1)
        );

    }

    @Test
    void shouldBeRemoveUserFromFriend() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);

        userService.addFriend(1, 3);

        assertTrue(userService.getUserById(1).getFriends().contains(3));


        userService.deleteFromFriends(1, 3);

    }

    @Test
    void shouldBeThrowExceptionIfUsersNotFriendByDelete() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);

        final IncorrectIdException exception = assertThrows(
                IncorrectIdException.class,
                () -> userService.deleteFromFriends(1, 1)
        );

    }

    @Test
    void shouldBeDeleteUser() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);

        userService.deleteUser(2);

        assertEquals(2, userService.findAll().size());

    }

    @Test
    void shouldBeThrowExceptionIfDeleteUserIdIsNotExist() {

        userService.createUser(user1);
        userService.createUser(user2);

        final IncorrectIdException exception = assertThrows(
                IncorrectIdException.class,
                () -> userService.deleteUser(3)
        );

    }

    @Test
    void shouldBeGetFriendLoginList() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);
        userService.createUser(user4);
        userService.createUser(user5);

        userService.addFriend(1, 3);
        userService.addFriend(1, 5);

        List<User> testListFriends = userService.getFriendList(1);

        assertEquals(user3.getLogin(), testListFriends.get(0).getLogin());
        assertEquals(user5.getLogin(), testListFriends.get(1).getLogin());

    }

    @Test
    void shouldBeGetCommonFriendList() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);
        userService.createUser(user4);
        userService.createUser(user5);

        userService.addFriend(1, 2);
        userService.addFriend(1, 4);
        userService.addFriend(5, 2);
        userService.addFriend(5, 4);
        userService.addFriend(5, 3);

        List<User> testCommonFriendsList = userService.getCommonFriendsListAsLogins(1, 5);

        assertEquals(2, testCommonFriendsList.size());

        assertEquals(user2.getLogin(), testCommonFriendsList.get(0).getLogin());
        assertEquals(user4.getLogin(), testCommonFriendsList.get(1).getLogin());

    }

    @Test
    void shouldBeGetAllUsers() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);
        userService.createUser(user4);
        userService.createUser(user5);

        assertEquals(5, userService.findAll().size());

    }

    @Test
    void shouldBeGiveRecommendations() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);
        userService.createUser(user4);
        userService.createUser(user5);

        Film film1 = new Film("film1", "descriptionFilm1", LocalDate.of(2000, 1, 1), 100);
        film1.setMpa(new Mpa(1));
        Film film2 = new Film("film2", "descriptionFilm2", LocalDate.of(2000, 2, 2), 110);
        film2.setMpa(new Mpa(1));
        Film film3 = new Film("film3", "descriptionFilm3", LocalDate.of(2000, 3, 3), 120);
        film3.setMpa(new Mpa(1));
        Film film4 = new Film("film4", "descriptionFilm4", LocalDate.of(2000, 4, 4), 130);
        film4.setMpa(new Mpa(1));
        Film film5 = new Film("film5", "descriptionFilm5", LocalDate.of(2000, 5, 5), 140);
        film5.setMpa(new Mpa(1));

        filmService.addFilm(film1);
        filmService.addFilm(film2);
        filmService.addFilm(film3);
        filmService.addFilm(film4);
        filmService.addFilm(film5);

        filmService.addLike(1, 1);
        filmService.addLike(1, 2);

        assertEquals(2, filmService.getFilmById(1).getLikes().size());

        filmService.addLike(2, 1);
        filmService.addLike(3, 1);
        filmService.addLike(4, 1);
        filmService.addLike(5, 1);


        filmService.addLike(1, 4);
        filmService.addLike(2, 4);
        filmService.addLike(3, 4);

        filmService.addLike(1, 5);

        assertEquals(4, filmService.getFilmById(1).getLikes().size());

        Set<Film> recommendedFilm = userService.getFilmRecommendations(4);

        assertEquals(2, recommendedFilm.size());

    }

    @Test
    public void shouldBeReturnEmptySetWhenNothingToRecommend() {

        userService.createUser(user1);
        userService.createUser(user2);
        userService.createUser(user3);
        userService.createUser(user4);
        userService.createUser(user5);

        Film film1 = new Film("film1", "descriptionFilm1", LocalDate.of(2000, 1, 1), 100);
        film1.setMpa(new Mpa(1));
        Film film2 = new Film("film2", "descriptionFilm2", LocalDate.of(2000, 2, 2), 110);
        film2.setMpa(new Mpa(1));
        Film film3 = new Film("film3", "descriptionFilm3", LocalDate.of(2000, 3, 3), 120);
        film3.setMpa(new Mpa(1));
        Film film4 = new Film("film4", "descriptionFilm4", LocalDate.of(2000, 4, 4), 130);
        film4.setMpa(new Mpa(1));
        Film film5 = new Film("film5", "descriptionFilm5", LocalDate.of(2000, 5, 5), 140);
        film5.setMpa(new Mpa(1));

        filmService.addFilm(film1);
        filmService.addFilm(film2);
        filmService.addFilm(film3);
        filmService.addFilm(film4);
        filmService.addFilm(film5);

        Set<Film> recommendedFilm = userService.getFilmRecommendations(1);

        assertEquals(0, recommendedFilm.size());

        filmService.addLike(1, 1);
        filmService.addLike(2, 1);

        filmService.addLike(1, 3);
        filmService.addLike(2, 3);

        recommendedFilm = userService.getFilmRecommendations(1);

        assertEquals(0, recommendedFilm.size());

    }



}